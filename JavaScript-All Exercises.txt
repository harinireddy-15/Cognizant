// Exercise 1: JavaScript Basics & Setup
console.log("Welcome to the Community Portal");
window.onload = function () {
  alert("Page fully loaded");
};

// Exercise 2: Syntax, Data Types, and Operators
const eventName = "Community Cleanup";
const eventDate = "2025-06-10";
let availableSeats = 30;
console.log(`Event: ${eventName} on ${eventDate} - Seats: ${availableSeats}`);
availableSeats--;

// Exercise 3: Conditionals, Loops, and Error Handling
const events = [
  { name: "Music Fest", date: "2025-06-01", seats: 0 },
  { name: "Art Workshop", date: "2025-07-01", seats: 15 },
];
const today = new Date("2025-05-27");
events.forEach((e) => {
  if (new Date(e.date) > today && e.seats > 0) {
    console.log(`${e.name} is available`);
  }
});
try {
  if (availableSeats <= 0) throw "No seats left!";
  console.log("Registered!");
} catch (err) {
  console.error(err);
}

// Exercise 4: Functions, Scope, Closures, Higher-Order Functions
function addEvent(name, category) {
  return { name, category };
}
function registerUser(name) {
  console.log(`${name} registered.`);
}
function filterEventsByCategory(events, category) {
  return events.filter((e) => e.category === category);
}
function registrationTracker() {
  let count = 0;
  return function () {
    count++;
    return count;
  };
}
const musicTracker = registrationTracker();

// Exercise 5: Objects and Prototypes
function Event(name, seats) {
  this.name = name;
  this.seats = seats;
}
Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};
const cleanup = new Event("Cleanup Drive", 10);
console.log(Object.entries(cleanup));

// Exercise 6: Arrays and Methods
let allEvents = ["Music", "Dance", "Coding"];
allEvents.push("Baking");
let musicEvents = allEvents.filter((e) => e === "Music");
let eventCards = allEvents.map((e) => `Event: ${e}`);
console.log(eventCards);

// Exercise 7: DOM Manipulation
document.addEventListener("DOMContentLoaded", () => {
  const container = document.querySelector("#eventContainer");
  allEvents.forEach((e) => {
    const card = document.createElement("div");
    card.textContent = e;
    container.appendChild(card);
  });
});

// Exercise 8: Event Handling
document.querySelector("#registerBtn").onclick = () => {
  alert("Thanks for registering!");
};
document.querySelector("#categoryFilter").onchange = (e) => {
  console.log(`Filtering: ${e.target.value}`);
};
document.querySelector("#searchInput").onkeydown = (e) => {
  console.log(`Key: ${e.key}`);
};

// Exercise 9: Async JS, Promises, Async/Await
function fetchEvents() {
  return new Promise((resolve) => {
    setTimeout(() => resolve(["Event1", "Event2"]), 1000);
  });
}
fetchEvents().then(console.log);
async function loadEvents() {
  console.log("Loading...");
  const result = await fetchEvents();
  console.log(result);
}
loadEvents();

// Exercise 10: Modern JavaScript Features
const greet = (name = "User") => `Hello, ${name}`;
const eventDetails = { name: "Yoga", location: "Park" };
const { name, location } = eventDetails;
const cloned = [...allEvents];

// Exercise 11: Working with Forms
document.querySelector("#regForm").addEventListener("submit", (e) => {
  e.preventDefault();
  const name = e.target.elements["name"].value;
  const email = e.target.elements["email"].value;
  if (!name || !email) {
    alert("Please fill all fields");
  } else {
    alert("Registered!");
  }
});

// Exercise 12: AJAX & Fetch API
function sendRegistration(user) {
  console.log("Sending data...");
  setTimeout(() => {
    console.log("Success", user);
  }, 1000);
}
sendRegistration({ name: "Alex" });

// Exercise 13: Debugging and Testing
console.log("Debug registration...");

// Exercise 14: jQuery and JS Frameworks
$("#registerBtn").click(() => {
  $(".eventCard").fadeIn();
});
// Frameworks like React help build UIs using reusable components.
